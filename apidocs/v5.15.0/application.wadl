<?xml version="1.0" encoding="UTF-8"?>
<wadl:application xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <wadl:doc xmlns:enunciate="http://enunciate.codehaus.org/" enunciate:generatedBy="Enunciate-1.27"/>
  <wadl:grammars>
    <wadl:include href="ns0.xsd"/>
  </wadl:grammars>
  <wadl:resources base="http://localhost:8080/cloudera-manager-api">
    <wadl:resource path="/api/v19/audits">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch audit events from Cloudera Manager (CM) and CM managed services
like HDFS, HBase, Impala, Hive, and Sentry.
<p>
By default, this call will fetch the first 100 audit events (sorted from most
recent to oldest) corresponding to a 1 day window based on provided end time
(which defaults to the  current CM server time). The <em>startTime</em> and
<em>endTime</em> parameters can be used to control the window being queried.
<p>
Audit events for CM managed services are only retrieved if Cloudera
Navigator server is running.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="maxResults" style="query">
            <wadl:doc>
              <![CDATA[Maximum number of audits to return]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="resultOffset" style="query">
            <wadl:doc>
              <![CDATA[Offset of audits to return]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="startTime" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query in ISO 8601 format (defaults
to 1 day ago relative to endTime).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="endTime" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query in ISO 8601 format (defaults to
current time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="query" style="query">
            <wadl:doc>
              <![CDATA[The query to filter out audits in the system. It accepts
querying the intersection of a list of constraints,
joined together with semicolons (without spaces). For example:
</p>
<dl>
<dt>command==listStatus</dt>
<dd>looks for audits with listStatus command.</dd>
<dt>command==listStatus;username!=foo</dt>
<dd>looks for audits with listStatus command but excludes
audits generated by foo username</dd>
<dt>command==listStatus;source==*oozie*</dt>
<dd>looks for audits with listStatus command and source that
contains the string 'oozie'.
</dd>
</dl>

Following are valid selectors for the query (if applicable to the
audit):
<table>
<tr>
<th> Selector </th>
<th> Description </th>
<th> SCM </th>
<th> HDFS </th>
<th> HBase </th>
<th> Hive </th>
<th> Impala </th>
<th> Sentry </th>
</tr>
<tr>
<td> service </td>
<td> Cloudera Manager Service </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> operation </td>
<td> Operation name </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> username </td>
<td> User name </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> impersonator</td>
<td> Impersonator </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> ip_address </td>
<td> IP Address </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> allowed </td>
<td> Whether the request was allowed or denied </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> qualifier</td>
<td> Column qualifier </td>
<td> </td>
<td> </td>
<td> x </td>
<td> </td>
<td> </td>
<td> </td>
</tr>
<tr>
<td> source </td>
<td> Source resource of the operation  </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> </td>
</tr>
<tr>
<td> destination </td>
<td> Destination resource of the operation </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> </td>
</tr>
<tr>
<td> hostIpAddress </td>
<td> Host IP Address </td>
<td> x </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
</tr>
<tr>
<td> role </td>
<td> Cloudera Manager Role </td>
<td> x </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
<td> </td>
</tr>
<tr>
<td> family </td>
<td> Column family </td>
<td> </td>
<td> </td>
<td> x </td>
<td> </td>
<td> </td>
<td> </td>
</tr>
<tr>
<td> database_name </td>
<td> Database name </td>
<td> </td>
<td> </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> table_name </td>
<td> Table name </td>
<td> </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> object_type </td>
<td> Type of object being handled </td>
<td> </td>
<td> </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
<tr>
<td> operation_text </td>
<td> Command/query text </td>
<td> </td>
<td> </td>
<td> </td>
<td> x </td>
<td> x </td>
<td> x </td>
</tr>
</table>
<p>
The only supported operator is <em>";"</em> (Boolean AND). Boolean OR is
not supported.
<p>
The supported comparators are <em>==</em> and <em>!=</em>
Note that "LIKE" comparison is supported using the wild card syntax,
for example <em>foo==*value*</em>. Asterisk is interpreted as a wild
card character and must not be part of the value. (LIKE comparison
queries are converted to standard SQL LIKE syntax, so any % (%25)
character in a value that also contains a wild card will be
interpreted as a wild card.)
<p/>
Available since API v8. A subset of these features is available since v4.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of audits in descending order of timestamp]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/batch">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Executes a batch of API requests in one database transaction. If any
request fails, execution halts and the transaction is rolled back.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Batch of request to execute.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Batch response, containing one element for each executed request
element. If a request element was skipped (i.e. a previous request
element failed), it will not have a corresponding response element.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a collection of clusters.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of clusters to created.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of created clusters.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all known clusters.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of known clusters.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/events">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Allows you to query events in the system.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="maxResults" style="query">
            <wadl:doc>
              <![CDATA[The maximum number of events to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="resultOffset" style="query">
            <wadl:doc>
              <![CDATA[Specified the offset of events to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="query" style="query">
            <wadl:doc>
              <![CDATA[The query to perform to find events in the system. It accepts
querying the intersection of a list of constraints,
joined together with semicolons (without spaces). For example:
</p>
<dl>
<dt>alert==true</dt>
<dd>looks for alerts.</dd>
<dt>alert==true;attributes.host!=flaky.mysite.com</dt>
<dd>looks for alerts, but exclude those with the host attribute of
"flaky.mysite.com".</dd>
<dt>category==log_event;attributes.log_level==ERROR</dt>
<dd>looks for error log events. Event attribute matching is
case sensitive.</dd>
<dt>attributes.service==hbase1;content==hlog</dt>
<dd>looks for any events from the "hbase1" service that
mention "hlog".</dd>
<dt>attributes.service==hbase1;content!=hlog</dt>
<dd>looks for any events from the "hbase1" service that
do not mention "hlog".<br/>
A query must not contain only negative
constraints (<em>!=</em>). It returns empty results because
there is nothing to perform exclusion on.</dd>
<dt>attributes.role_type==NAMENODE;severity==critical important</dt>
<dd>looks for any important or critical events related to
all NameNodes.</dd>
<dt>severity==critical;timeReceived=ge=2012-05-04T00:00;timeReceived=lt=2012-05-04T00:10</dt>
<dd>looks for critical events received between the given 10 minute
range. <br/>
When polling for events, use <em>timeReceived</em>
instead of <em>timeOccurred</em> because events arrive
out of order.</dd>
</dl>

You may query any fields present in the ApiEvent object. You can
also query by event attribute values using the <em>attributes.*</em>
syntax. Values for date time fields (e.g. <em>timeOccurred</em>,
<em>timeReceived</em>) should be ISO8601 timestamps.
<p>
The other valid comparators are <em>=lt=</em>, <em>=le=</em>,
<em>=ge=</em>, and <em>=gt=</em>. They stand for "&lt;", "&lt;=",
"&gt;=", "&gt;" respectively. These comparators are only applicable
for date time fields.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The results of the query]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[<p>Create one or more hosts.</p>
<p>You must specify at least the
hostname and ipAddress in the request objects.
If no hostId is specified, it will be set to the
hostname.  It is an error to try and create
host with the same hostId as another host.</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The list of hosts to create]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The newly created host objects]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the hostIds for all hosts in the system.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of hostIds]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete all hosts in the system]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of deleted hosts]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Retrieve time-series data from the Cloudera Manager (CM) time-series
data store accepting HTTP POST request. This method differs
from queryTimeSeries() in v6 that this could accept query strings that are
longer than HTTP GET request limit.

Available since API v11.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Request object containing information used when
retrieving timeseries data.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="timeSeriesQuery"/>
          <wadl:representation mediaType="application/xml" element="timeSeriesQuery"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of time series that match the tsquery.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve time-series data from the Cloudera Manager (CM) time-series
data store using a tsquery.

Please see the
<a href="http://tiny.cloudera.com/cm_tsquery">
tsquery language documentation</a>.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="query" style="query">
            <wadl:doc>
              <![CDATA[Tsquery to run against the CM time-series data store.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query in ISO 8601 format (defaults to 5
minutes before the end of the period).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query in ISO 8601 format (defaults to
current time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="contentType" style="query">
            <wadl:doc>
              <![CDATA[to return the response in. The content types
"application/json" and "text/csv" are supported. This defaults to
"application/json". If "text/csv" is specified then we return one row
per time series data point, and we don't return any of the metadata.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="desiredRollup" style="query">
            <wadl:doc>
              <![CDATA[Aggregate rollup level desired for the response data.
Valid values are RAW, TEN_MINUTELY, HOURLY, SIX_HOURLY, DAILY, and WEEKLY.
Note that if the mustUseDesiredRollup parameter is not set, then the
monitoring server can decide to return a different rollup level.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="mustUseDesiredRollup" style="query">
            <wadl:doc>
              <![CDATA[If set then the tsquery will return
data with the desired aggregate rollup level.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of time series that match the tsquery.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve time-series data from the Cloudera Manager (CM) time-series
data store using a tsquery.
<p>
Please see the
<a href="http://tiny.cloudera.com/cm_tsquery">
tsquery language documentation</a>.
</p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="query" style="query">
            <wadl:doc>
              <![CDATA[Tsquery to run against the CM time-series data store.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query in ISO 8601 format (defaults to 5 minutes before the
end of the period).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query in ISO 8601 format (defaults to current time).]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of time series that match the tsquery.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="timeSeriesResponseList"/>
          <wadl:representation mediaType="application/xml" element="timeSeriesResponseList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/users">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a list of users.
<p>
When creating new users, the <i>password</i> property of each user should
be their plain text password. The returned user information will not
contain any password information.
<p/>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of users to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about created users.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of the user names configured in the system.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of users.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/audits/stream">
      <wadl:method name="GET">
        <wadl:request>
          <wadl:param name="maxResults" style="query"/>
          <wadl:param name="resultOffset" style="query"/>
          <wadl:param name="startTime" style="query"/>
          <wadl:param name="endTime" style="query"/>
          <wadl:param name="query" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update an existing cluster.
<p>
To update the CDH version, provide the new value in the "fullVersion"
property. Setting a correct version that matches the actual installed software
will ensure the correct version-specific features, such as services, roles,
commands, and configurations. This need not be manually set for clusters
using parcels. In general this action is only necessary after the CDH
packages have been manually updated. Note that a downgrade may be rejected
if it would render existing services or roles unusable. For major upgrade,
the "upgradeService" cluster command should be used instead.</p>
<p>
To rename the cluster, provide the new name in the "displayName"
property for API >= 6, or in the "name" property for API <=5.
<p>
Available since API v2.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details of the affected cluster.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a cluster.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details of deleted cluster.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Reads information about a cluster.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details of requested cluster.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active global commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active global commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/config">
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update the Cloudera Manager settings.
<p>
If a value is set in the given configuration, it will be added to the
manager's settings, replacing any existing entry. If a value is unset (its
value is null), the existing the setting will be erased.
<p>
Settings that are not listed in the input will maintain their current
values.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Settings to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve the Cloudera Manager settings.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize, either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current Cloudera Manager settings.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update the Cloudera Manager settings.
<p>
If a value is set in the given configuration, it will be added to the
manager's settings, replacing any existing entry. If a value is unset (its
value is null), the existing the setting will be erased.
<p>
Settings that are not listed in the input will maintain their current
values.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Settings to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/deployment">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve full description of the entire Cloudera Manager deployment
including all hosts, clusters, services, roles, users, settings, etc.
<p/>
This object can be used to reconstruct your entire deployment
<p/>
Note: Only users with sufficient privileges are allowed to call this.
<ul>
<li>Full Administrators</li>
<li>Cluster Administrators (but Navigator config will be redacted)</li>
</ul>
<p/>
Note: starting with v3, the deployment information contains data about
Cloudera Manager peers configured for the instance. This data contains
plain text authentication information used to connect to the remote peer.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[May be one of "export" (default) or "export_redacted".  The latter
replaces configurations that are sensitive with the word "REDACTED".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A complete deployment description]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Apply the supplied deployment description to the system. This will
create the clusters, services, hosts and other objects specified in
the argument. This call does not allow for any merge conflicts. If
an entity already exists in the system, this call will fail.
You can request, however, that all entities in the system are deleted
before instantiating the new ones.
<p/>
You may specify a complete or partial deployment, e.g. you can provide
host info with no clusters.  However, if you request that
the current deployment be deleted, you are required to specify at
least one admin user or this call will fail. This is to protect
you from creating a system that cannot be logged into again.
<p/>
If there are any errors creating (or optionally deleting) a deployment,
all changes will be rolled back leaving the system exactly as it was
before calling this method.  The system will never be left in a state
where part of the deployment is created and other parts are not.
<p/>
If the submitted deployment contains entities that require Cloudera
Enterprise license, then the license should be provided to Cloudera Manager
before making this API call.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The deployment to create]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="deleteCurrentDeployment" style="query">
            <wadl:doc>
              <![CDATA[If true, the current deployment is deleted
before the specified deployment is applied]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The system deployment info after successfully applying the given deployment.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/importClusterTemplate">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create cluster as per the given cluster template]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[cluster template]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="addRepositories" style="query">
            <wadl:doc>
              <![CDATA[if true the parcels repositories in the cluster
template will be added.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The command performing import task]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/kerberosInfo">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides Cloudera Manager Kerberos information]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cloudera Manager Kerberos information]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/kerberosPrincipals">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the Kerberos principals needed by the services being managed
by Cloudera Manager.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="missingOnly" style="query">
            <wadl:doc>
              <![CDATA[Whether to include only those principals which do
not already exist in Cloudera Manager's database.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of kerberos principals.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/license">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve information about the Cloudera Manager license.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current license information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates the Cloudera Manager license.
<p>
After a new license is installed, the Cloudera Manager needs to be
restarted for the changes to take effect.
<p>
The license file should be uploaded using a request with content type
"multipart/form-data", instead of being encoded into a JSON representation.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new license information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/licensedFeatureUsage">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve a summary of licensed feature usage.
<p/>
This command will return information about what Cloudera Enterprise
licensed features are in use in the clusters being managed by this Cloudera
Manager, as well as totals for usage across all clusters.
<p/>
The specific features described can vary between different versions of
Cloudera Manager.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/log">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the entire contents of the Cloudera Manager log file]]>
        </wadl:doc>
        <wadl:response>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/peers">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves all configured Cloudera Manager peers.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.
<p>
When accessed via API version before v11, only REPLICATION type peers will
be returned.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of Cloudera Manager peers.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create a new Cloudera Manager peer.
<p>
The remote server will be contacted so that a user can be created
for use by the new peer. The <i>username</i> and <i>password</i>
properties of the provided peer object should contain credentials
of a valid admin user on the remote server. A timeout of 10 seconds
is enforced when contacting the remote server.
<p>
It is recommended to run the remote server with TLS enabled, since
creating and using peers involve transferring credentials over the
network.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.
<p>
Type field in ApiCmPeer is available since API v11. if not specified
when making createPeer() call, 'REPLICATION' type peer will be created.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Peer to create (see above).]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the created peer.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/scmDbInfo">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides Cloudera Manager server's database information]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cloudera Manager server's database information]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service">
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete the Cloudera Management Services.
<p>
This method will fail if a CMS instance doesn't already exist.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[ApiService The deleted CMS information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve information about the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details about the management service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve information about the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details about the management service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Setup the Cloudera Management Services.
<p>
Configure the CMS instance and create all the management roles. The
provided configuration data can be used to set up host mappings for
each role, and required configuration such as database connection
information for specific roles.
<p>
Regardless of the list of roles provided in the input data, all
management roles are created by this call. The input is used to
override any default settings for the specific roles.
<p>
This method needs a valid CM license to be installed beforehand.
<p>
This method does not start any services or roles.
<p>
This method will fail if a CMS instance already exists.
<p>
Available role types:
<ul>
<li>SERVICEMONITOR</li>
<li>ACTIVITYMONITOR</li>
<li>HOSTMONITOR</li>
<li>REPORTSMANAGER</li>
<li>EVENTSERVER</li>
<li>ALERTPUBLISHER</li>
<li>NAVIGATOR</li>
<li>NAVIGATORMETASERVER</li>
</ul>

<p/>
REPORTSMANAGER, NAVIGATOR and NAVIGATORMETASERVER are only available with
Cloudera Manager Enterprise Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Role configuration overrides.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[ApiService The CMS information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/shutdownReadiness">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve Cloudera Manager's readiness for shutdown and destroy.
Applications that wish to destroy Cloudera Manager and its managed cluster
should poll this API, repeatedly if necessary, to respect its readiness.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="lastActivityTime" style="query">
            <wadl:doc>
              <![CDATA[End time of the last known activity/workload
against the managed clusters, in ISO 8601 format.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cloudera Manager readiness for shutdown]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/version">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides version information of Cloudera Manager itself.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Version information]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/commands/{commandId}">
      <wadl:param name="commandId" style="template">
        <wadl:doc>
          <![CDATA[The command id.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve detailed information on an asynchronous command.

<p>Cloudera Manager keeps the results and statuses of asynchronous
commands, which have non-negative command IDs. On the other hand,
synchronous commands complete immediately, and their results are passed
back in the return object of the command execution API call.
Outside of that return object, there is no way to check the result
of a synchronous command.</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Detailed command information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/events/{eventId}">
      <wadl:param name="eventId" style="template">
        <wadl:doc>
          <![CDATA[The UUID of the event to read]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a specific event in the system]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The Event object with the specified UUID]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/create">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create a new external account.
Account names and display names must be unique, i.e. they must not share names or display
names with an existing account.
Server generates an account ID for the requested account.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/supportedCategories">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List of external account categories supported by this Cloudera Manager.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[external account categories]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/update">
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update an external account.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The ID of the host to read]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a specific Host in the system]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The Host object with the specified hostId]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[<p>Update an existing host in the system.</p>
<p>Currently, only updating the rackId is supported.  All other fields
of the host will be ignored.</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The updated host object.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated host]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete a host from the system]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The deleted Host]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries/dashboards">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the list of all user-customized dashboards. This includes both the
new dashboards created by users as well as any user customizations to
built-in dashboards.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the list of dashboards. If any of the dashboards already exist
this whole command will fail and no dashboards will be created.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The list of dashboards to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The dashboards created.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries/entityTypeAttributes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve all metric entity type attributes monitored by Cloudera Manager.
<p/>
Available since API v11.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of time series entity attributes.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="timeSeriesEntityAttributeList"/>
          <wadl:representation mediaType="application/xml" element="timeSeriesEntityAttributeList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries/entityTypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve all metric entity types monitored by Cloudera Manager.
It is guaranteed that parent types appear before their children.
<p/>
Available since API v11.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of time series entity type.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="timeSeriesEntityTypeList"/>
          <wadl:representation mediaType="application/xml" element="timeSeriesEntityTypeList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries/schema">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve schema for all metrics
<p/>
The schema is fixed for a product version.
The schema may change for an API versions
<p/>
Available since API v4.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of metric schema.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="metricSchemaList"/>
          <wadl:representation mediaType="application/xml" element="metricSchemaList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/tools/echo">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Echoes the provided message back to the caller.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[The message to echo back]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The original message]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/tools/echoError">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Throws an error containing the given input message. This is
what an error response looks like.

<pre>
{
"message": "An error message",
"causes": [ "A list of causes", "Potentially null" ]
}
</pre>

<p>The <em>message</em> field contains a description of the error.
The <em>causes</em> field, if not null, contains a list of causes
for the error.
</p>

<p>Note that this <strong>never</strong> returns an echoMessage.
Instead, the result (and all error results) has the above structure.
</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[The error message to echo]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Will always be an exception]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/users/sessions">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Return a list of the sessions associated with interactive authenticated
users in Cloudera Manager.
<p>
Note that these sessions are only associated with users who log into the
web interface. API users will not appear.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of user sessions]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/users/{userName}">
      <wadl:param name="userName" style="template">
        <wadl:doc>
          <![CDATA[The name of the user to delete.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a user from the system.
<p/>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the deleted user.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns detailed information about a user.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The user's information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the given user's information. Note that the user's name cannot
be changed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The user information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/autoAssignRoles">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Automatically assign roles to hosts and create the roles for all the services in a cluster.
<p>
Assignments are done based on services and hosts in the cluster, and hardware specifications.
If no hosts are added to the cluster, an exception will be thrown preventing any
role assignments.
Existing roles will be taken into account and their assignments will be
not be modified.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/autoConfigure">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Automatically configures roles and services in a cluster.
<p>
Overwrites some existing configurations. Might create new role config groups.
Only default role config groups must exist before calling this endpoint.
Other role config groups must not exist. If they do, an exception will be thrown
preventing any configuration.
Ignores the Cloudera Management Service even if colocated with roles of this
cluster. To avoid over-committing the heap on hosts, assign hosts to this cluster
that are not being used by the Cloudera Management Service.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/clientConfig">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The cluster name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Download a zip-compressed archive of the client configuration, of a
specific cluster. Currently, this only includes Kerberos Client
Configuration (krb5.conf). For client configuration of services, use the
clientConfig endpoint of the services resource. This resource does not
require any authentication.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The archive data.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/octet-stream"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active cluster commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active cluster commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/dfsServices">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[cluster name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List the services that can provide distributed file system (DFS) capabilities in this cluster.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[data view required for matching services]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Services that provide DFS capabilities in this cluster]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/export">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[cluster name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Export the cluster template for the given cluster. If cluster does not have
host templates defined it will export host templates based on roles
assignment.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="exportAutoConfig" style="query">
            <wadl:doc>
              <![CDATA[export configs set by the auto configuration]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cluster template]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/hostTemplates">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates new host templates.
<p>
Host template names must be unique across clusters.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The list of host templates to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The created host templates.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all host templates in a cluster.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of host templates in the cluster.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/hosts">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the hosts associated with the cluster]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the newly added hosts to the cluster.
if a host is already a member,
it will be excluded from the list]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[all the hosts that were unassociated with the cluster]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/kerberosInfo">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides Cluster Kerberos information]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cluster Kerberos information]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all parcels that the cluster has access to.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of parcels.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/serviceTypes">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List the supported service types for a cluster.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of service types the cluster supports.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a list of services.
<p>
There are typically two service creation strategies:
<ol>
<li>
The caller may choose to set up a new service piecemeal, by first
creating the service itself (without any roles or configuration),
and then create the roles, and then specify configuration.
</li>
<li>
Alternatively, the caller can pack
all the information in one call, by fully specifying the fields in
the com.cloudera.api.model.ApiService object, with
<ul>
<li>service config and role type config, and</li>
<li>role to host assignment.</li>
</ul>
</li>
</ol>

<table>
<thead>
<tr>
<th>Cluster Version</th>
<th>Available Service Types</th>
</tr>
</thead>
<tbody>
<tr>
<td>CDH4</td>
<td>HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA, FLUME, HIVE, SOLR, SQOOP, KS_INDEXER</td>
</tr>
<tr>
<td>CDH5</td>
<td>HDFS, MAPREDUCE, HBASE, OOZIE, ZOOKEEPER, HUE, YARN, IMPALA,
FLUME, HIVE, SOLR, SQOOP, KS_INDEXER, SQOOP_CLIENT, SENTRY,
ACCUMULO16, KMS, SPARK_ON_YARN
</td>
</tr>
</tbody>
</table>

As of V6, GET /{clusterName}/serviceTypes should be used to get
the service types available to the cluster.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Details of the services to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of created services.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all services registered in the cluster.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of services.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/utilization">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[cluster name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides the resource utilization of the entire cluster as well as the
resource utilization per tenant. Only available with Cloudera Manager Enterprise Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the time range to report utilization in ISO 8601 format.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the the time range to report utilization in ISO 8601 format (defaults to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="tenantType" style="query">
            <wadl:doc>
              <![CDATA[The type of the tenant (POOL or USER).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="daysOfWeek" style="query">
            <wadl:doc>
              <![CDATA[The days of the week for which the user wants to report utilization.
Days is a list of number between 1 to 7, where 1 corresponds to Monday,
and 7 corrensponds to Sunday. All 7 days are included if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="startHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The start hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 0 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="endHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The end hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 23 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Cluster utilization report resource handler.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/allHosts/config">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve the default configuration for all hosts.
<p/>
These values will apply to all hosts managed by CM unless overridden
at the host level.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of config values.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update the default configuration values for all hosts.
<p/>
Note that this does not override values set at the host level. It just
updates the default values that will be inherited by each host's
configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The config values to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Updated list of config values.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/collectDiagnosticData">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Collect diagnostic data from hosts managed by Cloudera Manager.
<p>
After the command has completed, the ApiCommand will contain a
resultDataUrl from where you can download the result.
<p/>
Only available with Cloudera Manager Enterprise Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The command arguments.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Detailed command information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/deleteCredentials">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Delete existing Kerberos credentials.
<p>
This command will affect all services that have been configured to use
Kerberos, and have existing credentials. In V18 this takes a new
paramater to determine whether it needs to delete all credentials
or just unused ones.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="deleteCredentialsMode" style="query">
            <wadl:doc>
              <![CDATA[this can be set to "all" or "unused"]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Delete existing Kerberos credentials.
<p>
This command will affect all services that have been configured to use
Kerberos, and have existing credentials.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/generateCredentials">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Generate missing Kerberos credentials.
<p>
This command will affect all services that have been configured to use
Kerberos, and haven't had their credentials generated yet.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostInstall">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Perform installation on a set of hosts.
<p/>
This command installs Cloudera Manager Agent on a
set of hosts.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Hosts to perform installation on]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="hostInstallArgs"/>
          <wadl:representation mediaType="application/xml" element="hostInstallArgs"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsDecommission">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Decommission the given hosts.
All slave roles on the hosts will be decommissioned.
All other roles will be stopped.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsOfflineOrDecommission">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Decommission the given hosts.
All slave roles on the hosts will be offlined or decommissioned with
preference being offlined if supported by the service.
<p>
Currently the offline operation is only supported by HDFS, where
the offline operation will put DataNodes into <em>HDFS IN MAINTENANCE</em> state which
prevents unnecessary re-replication which could occur if decommissioned.
<p>
All other roles on the hosts will be stopped.
<p>
The <em>offlineTimeout</em> parameter is used to specify a timeout for offline. For HDFS, when the
timeout expires, the DataNode will automatically transition out of <em>HDFS IN MAINTENANCE</em> state,
back to <em>HDFS IN SERVICE</em> state.
<p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[list of host names to decommission.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
          <wadl:param name="offlineTimeout" style="query">
            <wadl:doc>
              <![CDATA[offline timeout in seconds. Specify as null to get the default timeout (4 hours).
Ignored if service does not support he offline operation.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsRecommission">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Recommission the given hosts.
All slave roles on the hosts will be recommissioned.
Roles are not started after this command. Use hostsStartRoles command
for that.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsRecommissionAndExitMaintenanceMode">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Recommission and exit maintenance on the given hosts.
The recommission step may optionally start roles as well.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
          <wadl:param name="recommissionType" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsRecommissionWithStart">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Recommission the given hosts. If slave roles support start when decommissioned,
start those roles before recommission.
All slave roles on the hosts will be recommissioned.

Warning: Evolving. This method may change in the future and does not offer standard compatibility guarantees.
Recommission the given hosts. If possible, start those roles before recommission. All slave roles on the hosts
will be recommissioned.
Do not use without guidance from Cloudera.

Currently, only HDFS DataNodes will be started by this command.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/hostsStartRoles">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start all the roles on the given hosts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="hostNames"/>
          <wadl:representation mediaType="application/xml" element="hostNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/importAdminCredentials">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Imports the KDC Account Manager credentials needed by Cloudera
Manager to create kerberos principals needed by CDH services.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="username" style="query">
            <wadl:doc>
              <![CDATA[Username of the Account Manager. Full name including the Kerberos
realm must be specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="password" style="query">
            <wadl:doc>
              <![CDATA[Password for the Account Manager.

return Information about the submitted command.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/importKerberosPrincipal">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Imports the Kerberos credentials for the specified principal
which can then be used to add to a role's keytab by running
Generate Credentials command.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="principal" style="query">
            <wadl:doc>
              <![CDATA[Name of the principal. Full name including the Kerberos
realm must be specified. If it already exists, it will be overwritten.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="password" style="query">
            <wadl:doc>
              <![CDATA[Password for the Kerberos principal. Cloudera Manager
will encrypt the principal and password and use it when needed for a daemon.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="kvno" style="query">
            <wadl:doc>
              <![CDATA[Key-version number of the password.

return Information about the submitted command.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/inspectHosts">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Runs the host inspector on the configured hosts.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/commands/refreshParcelRepos">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[<p>
Submit a command to refresh parcels information.
</p>
<p>
This API could be used following two scenarios.<br>
- User updated Cloudera Manager's local parcel repository. <br>
- User updated remote parcel locations.
<p>
User wants to invoke this API to make sure that Cloudera Manager gets
latest parcels information. User can then monitor the returned command
before proceeding to the next step.
</p>]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/peers/{peerName}">
      <wadl:param name="peerName" style="template">
        <wadl:doc>
          <![CDATA[Name of peer to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch information about an existing Cloudera Manager peer.
<p>
Available since API v11. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Type of peer to retrieve. If null, REPLICATION peer type
will be returned.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Peer information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete Cloudera Manager peer.
<p>
An attempt will be made to contact the peer server, so that the configured
user can be deleted.. Errors while contacting the remote server are
non-fatal.
<p>
Available since API v11. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Type of peer to delete. If null, REPLICATION peer type will
be deleted.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the deleted peer.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch information about an existing Cloudera Manager peer.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Peer information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete Cloudera Manager peer.
<p>
An attempt will be made to contact the peer server, so that the configured
user can be deleted.. Errors while contacting the remote server are
non-fatal.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the deleted peer.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update information for a Cloudera Manager peer.
<p>
In administrator credentials are provided in the peer information, they
will be used to establish new credentials with the remote server. This
can be used in case the old credentials are not working anymore. An
attempt will be made to delete the old credentials if new ones are
successfully created.
<p>
If changing the peer's URL, an attempt will be made to contact the old
Cloudera Manager to delete the existing credentials.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Updated peer information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated peer information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/autoAssignRoles">
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Automatically assign roles to hosts and create the roles for the Cloudera Management Service.
<p>
Assignments are done based on number of hosts in the deployment and hardware specifications.
If no hosts are part of the deployment, an exception will be thrown preventing any role assignments.
Existing roles will be taken into account and their assignments will be not be modified.
The deployment should not have any clusters when calling this endpoint. If it does,
an exception will be thrown preventing any role assignments.
<p>
Available since API v6.]]>
        </wadl:doc>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/autoConfigure">
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Automatically configures roles of the Cloudera Management Service.
<p>
Overwrites some existing configurations.
Only default role config groups must exist before calling this endpoint.
Other role config groups must not exist. If they do, an exception will be thrown
preventing any configuration.
Ignores any clusters (and their services and roles) colocated with the Cloudera
Management Service. To avoid over-committing the heap on hosts, place the
Cloudera Management Service roles on machines not used by any of the clusters.
<p>
Available since API v6.]]>
        </wadl:doc>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active Cloudera Management Services commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active role commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/config">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve the configuration of the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List with configured and available configuration options.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update the Cloudera Management Services configuration.
<p>
If a value is set in the given configuration, it will be added
to the service's configuration, replacing any existing entries.
If a value is unset (its value is null), the existing
configuration for the attribute will be erased, if any.
<p>
Attributes that are not listed in the input will maintain their
current values in the configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Configuration changes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new service configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleConfigGroups">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the information for all role config groups in
the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of role config groups for the given service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleTypes">
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List the supported role types for the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of role types the service supports.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create new roles in the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Roles to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of created roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List all roles of the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/trial/begin">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Begin trial license.]]>
        </wadl:doc>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/trial/end">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[End trial license.]]>
        </wadl:doc>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/commands/{commandId}/abort">
      <wadl:param name="commandId" style="template">
        <wadl:doc>
          <![CDATA[The command id.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Abort a running command.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Detailed command information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/commands/{commandId}/retry">
      <wadl:param name="commandId" style="template">
        <wadl:doc>
          <![CDATA[ID of the command that needs to be run.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Try to rerun a command.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Command that represents the retry attempt.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/account/{name}">
      <wadl:param name="name" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Get a single external account by account name.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/accountByDisplayName/{displayName}">
      <wadl:param name="displayName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Get a single external account by display name.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/delete/{name}">
      <wadl:param name="name" style="template"/>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete an external account, specifying its name.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/supportedTypes/{categoryName}">
      <wadl:param name="categoryName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List of external account types supported by this Cloudera Manager by category.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/type/{typeName}">
      <wadl:param name="typeName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Get a list of external accounts for a specific account type.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}/config">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The ID of the host.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the configuration of a specific host.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of host configuration parameters.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the host configuration with the given values.
<p>
If a value is set in the given configuration, it will be added
to the host's configuration, replacing any existing entries.
If a value is unset (its value is null), the existing
configuration for the attribute will be erased, if any.
<p>
Attributes that are not listed in the input will maintain their
current values in the configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Configuration changes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new host configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}/metrics">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The host's ID.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch metric readings for a host.
<p>
By default, this call will look up all metrics available for the host. If
only specific metrics are desired, use the <i>metrics</i> parameter.
<p>
By default, the returned results correspond to a 5 minute window based on
the provided end time (which defaults to the current server time). The
<i>from</i> and <i>to</i> parameters can be used to control the window
being queried. A maximum window of 3 hours is enforced.
<p>
When requesting a "full" view, aside from the extended properties of the
returned metric data, the collection will also contain information about
all metrics available for the role, even if no readings are available
in the requested window.
<p>
Host metrics also include per-network interface and per-storage device
metrics. Since collecting this data incurs in more overhead, query
parameters can be used to choose which network interfaces and storage
devices to query, or to these metrics altogether.
<p>
Storage metrics are collected at different levels; for example, per-disk
and per-partition metrics are available. The "storageIds" parameter can be
used to filter specific storage IDs.
<p>
In the returned data, the network interfaces and storage IDs can be
identified by looking at the "context" property of the metric objects.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="queryNw" style="query">
            <wadl:doc>
              <![CDATA[Whether to query for network interface metrics.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="ifs" style="query">
            <wadl:doc>
              <![CDATA[Network interfaces to query for metrics (default = all).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="queryStorage" style="query">
            <wadl:doc>
              <![CDATA[Whether to query for storage metrics.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="storageIds" style="query">
            <wadl:doc>
              <![CDATA[Storage context IDs to query for metrics (default = all).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="metrics" style="query">
            <wadl:doc>
              <![CDATA[Filter for which metrics to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of readings from the monitors.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/timeseries/dashboards/{dashboardName}">
      <wadl:param name="dashboardName" style="template">
        <wadl:doc>
          <![CDATA[The name of the dashboard.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a dashboard definition for the specified name. This dashboard
can be imported with the createDashboards API.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a dashboard.

<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The deleted dashboard.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/configureForKerberos">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Command to configure the cluster to use Kerberos for authentication.

This command will configure all relevant services on a cluster for
Kerberos usage.  This command will trigger a GenerateCredentials command
to create Kerberos keytabs for all roles in the cluster.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the configure for kerberos command.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="configureForKerberosArgs"/>
          <wadl:representation mediaType="application/xml" element="configureForKerberosArgs"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/deleteCredentials">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[cluster name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Delete existing Kerberos credentials for the cluster.
<p>
This command will affect all services that have been configured to use
Kerberos, and have existing credentials.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/deployClientConfig">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Deploy the cluster-wide client configuration.

<p>For each service in the cluster, deploy the service's client configuration
to all the hosts that the service runs on.</p>

<p>Available since API v2.</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/deployClusterClientConfig">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Deploy the Cluster's Kerberos client configuration.

<p>
Deploy krb5.conf to hosts in a cluster. Does not deploy to decommissioned
hosts or hosts with active processes.
</p>

<p>
Available since API v7.
</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Hosts in cluster to deploy to. If empty, will target all eligible
hosts in the cluster.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="hostRefList"/>
          <wadl:representation mediaType="application/xml" element="hostRefList"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/enterMaintenanceMode">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put the cluster into maintenance mode. This is a synchronous command.
The result is known immediately upon return.

<p>Available since API v2.</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/exitMaintenanceMode">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take the cluster out of maintenance mode. This is a synchronous command.
The result is known immediately upon return.

<p>Available since API v2.</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/firstRun">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Prepare and start services in a cluster.

<p>
Perform all the steps needed to prepare each service in a cluster and start the services
in order.
</p>

<p>
Available since API v7.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/inspectHosts">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Runs the host inspector on the configured hosts in the specified cluster.

Available since V8.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/poolsRefresh">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates all refreshable configuration files for services with
Dynamic Resource Pools.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/refresh">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Updates all refreshable configuration files in the cluster. Will not
restart any roles.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/restart">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart all services in the cluster.
<p>
Services are stopped then started in the appropriate order given their
dependencies. The command can optionally restart only stale services and
their dependencies as well as redeploy client configuration on all services
in the cluster.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[arguments for the restart command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart all services in the cluster.
<p>
Services are restarted in the appropriate order given their dependencies.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/rollingRestart">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Command to do a "best-effort" rolling restart of the given cluster,
i.e. it does plain restart of services that cannot be rolling restarted,
followed by first rolling restarting non-slaves and then rolling restarting
the slave roles of services that can be rolling restarted. The slave restarts
are done host-by-host.
<p>
Available since API v4. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the rolling restart command.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="rollingRestartClusterArgs"/>
          <wadl:representation mediaType="application/xml" element="rollingRestartClusterArgs"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/rollingUpgrade">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Command to do a rolling upgrade of specific services in the given cluster

This command does not handle any services that don't support rolling
upgrades. The command will throw an error and not start if upgrade of any
such service is requested.

This command does not upgrade the full CDH Cluster. You should normally
use the upgradeCDH Command for upgrading the cluster. This is primarily
helpful if you need to need to recover from an upgrade failure or for
advanced users to script an alternative to the upgradeCdhCommand.

This command expects the binaries to be available on hosts and activated.
It does not change any binaries on the hosts.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the rolling upgrade command.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="rollingUpgradeServicesArgs"/>
          <wadl:representation mediaType="application/xml" element="rollingUpgradeServicesArgs"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/start">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start all services in the cluster.
<p>
Services are started in the appropriate order given their dependencies.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/stop">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Stop all services in the cluster.
<p>
Services are stopped in the appropriate order given their dependencies.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/upgradeCdh">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Perform CDH upgrade to the specified version.
<p>
Allows the following upgrades:
<ul>
<li>Major upgrades from any CDH 4 to any CDH 5</li>
<li>Minor upgrades from any CDH 5 to any CDH 5</li>
<li>Maintenance upgrades or downgrades (a.b.x to a.b.y)</li>
</ul>
<p>
If using packages, CDH packages on all hosts of the cluster must be
manually upgraded before this command is issued.
<p>
The command will upgrade the services and their configuration to the
version available in the CDH5 distribution.
<p>
Unless rolling upgrade options are provided, the entire cluster will
experience downtime. If rolling upgrade options are provided, command will
do a "best-effort" rolling upgrade of the given cluster, i.e. it does
plain upgrade of services that cannot be rolling upgraded, followed by
first rolling upgrading non-slaves and then rolling restarting the slave
roles of services that can be rolling restarted. The slave restarts are
done host-by-host.
<p>
Available since v9. Rolling upgrade is only available with Cloudera
Manager Enterprise Edition. A more limited upgrade variant available since
v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command. See ApiCdhUpgradeArgs.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="cdhUpgradeArgs"/>
          <wadl:representation mediaType="application/xml" element="cdhUpgradeArgs"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/commands/upgradeServices">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrades the services in the cluster to the CDH5 version.
<p>
This command requires that the CDH packages in the hosts used by the
cluster be upgraded to CDH5 before this command is issued. Once issued,
this command will stop all running services before proceeding.
<p>
If parcels are used instead of CDH system packages then the following
steps need to happen in order:
<ol>
<li>Stop all services manually</li>
<li>Activate parcel</li>
<li>Run this upgrade command</li>
</ol>
The command will upgrade the services and their configuration to the
version available in the CDH5 distribution.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/hostTemplates/{hostTemplateName}">
      <wadl:param name="hostTemplateName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves information about a host template.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The requested host template.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates an existing host template.
<p>
Can be used to update the role config groups in a host template
or rename it.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated host template.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a host template.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Deleted host template.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/hosts/{hostId}">
      <wadl:param name="clusterName" style="template"/>
      <wadl:param name="hostId" style="template"/>
      <wadl:method name="DELETE">
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the host that was unassociated with the cluster.
if the host is not part of the cluster, return null]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/usage">
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve details parcel usage information for the cluster. This describes
which processes, roles and hosts are using which parcels.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The parcel usage information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves details information about a service.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[DataView to materialize. Defaults to 'full'.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates service information.
<p/>
This method will update only writable fields of the service information.
Currently this only includes the service display name.
<p/>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Updated service information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated service information.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a service from the system.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the deleted service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves details information about a service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands/enterMaintenanceMode">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put Cloudera Management Service into maintenance mode. This is a
synchronous command. The result is known immediately upon return.

<p>Available since API v18.</p>]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands/exitMaintenanceMode">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take Cloudera Management Service out of maintenance mode. This is a
synchronous command. The result is known immediately upon return.

<p>Available since API v18.</p>]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands/restart">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands/start">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/commands/stop">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Stop the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/jmapDump">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jmapDump diagnostic command. The command runs the jmap utility to
capture a dump of the role's java heap.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jmap.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/jmapHisto">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jmapHisto diagnostic command. The command runs the jmap utility to
capture a histogram of the objects on the role's java heap.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jmap.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/jstack">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jstack diagnostic command. The command runs the jstack utility to
capture a role's java thread stacks.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jstack.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/lsof">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the lsof diagnostic command. This command runs the lsof utility to
list a role's open files.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to lsof.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/restart">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart a set of Cloudera Management Services roles.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The roles to restart.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="roleNames"/>
          <wadl:representation mediaType="application/xml" element="roleNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands (summary view).]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/start">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start a set of Cloudera Management Services roles.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The roles to start.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="roleNames"/>
          <wadl:representation mediaType="application/xml" element="roleNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands (summary view).]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleCommands/stop">
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Stop a set of Cloudera Management Services roles.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The roles to stop.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="roleNames"/>
          <wadl:representation mediaType="application/xml" element="roleNames"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands (summary view).]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleConfigGroups/{roleConfigGroupName}">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the requested group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the information for a given role config group
in the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The requested role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates an existing role config group in the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The updated role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[The optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Role updated role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Delete a role from the Cloudera Management Services.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the deleted role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve detailed information about a Cloudera Management Services role.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/account/{name}/config">
      <wadl:param name="name" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Get configs of external account for the given account name.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize, either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the current external account configurations.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Upadate configs of external account for the given account name.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Settings to update.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/typeInfo/{typeName}/commandsByName">
      <wadl:param name="typeName" style="template">
        <wadl:doc>
          <![CDATA[The external account type name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all the commands that can be executed by name on the
provided external account type.
<p>
Available since API v16.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[a list of command metadata objects]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}/commands/enterMaintenanceMode">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The ID of the host]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put the host into maintenance mode. This is a synchronous command.
The result is known immediately upon return.

<p>Available since API v2.</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}/commands/exitMaintenanceMode">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The ID of the host]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take the host out of maintenance mode. This is a synchronous command. The
result is known immediately upon return.

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/hosts/{hostId}/commands/migrateRoles">
      <wadl:param name="hostId" style="template">
        <wadl:doc>
          <![CDATA[The ID of the host on which the roles to migrate currently
reside]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Migrate roles to a different host.
<p>
This command applies only to HDFS NameNode, JournalNode, and Failover
Controller roles. In order to migrate these roles:
<ul>
<li>HDFS High Availability must be enabled, using quorum-based storage.</li>
<li>HDFS must not be configured to use a federated nameservice.</li>
</ul>
<b>Migrating a NameNode or JournalNode role requires cluster downtime</b>.
HDFS, along with all of its dependent services, will be stopped at the
beginning of the migration process, and restarted at its conclusion.
<p>If the active NameNode is selected for migration, a manual failover
will be performed before the role is migrated. The role will remain in
standby mode after the migration is complete.
<p>When migrating a NameNode role, the co-located Failover Controller
role must be migrated as well if automatic failover is enabled. The
Failover Controller role name must be included in the list of role
names to migrate specified in the arguments to this command (it will
not be included implicitly). This command does not allow a Failover
Controller role to be moved by itself, although it is possible to move
a JournalNode independently.
<p>
Available since API v10.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/activities">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Read all activities in the system]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="maxResults" style="query">
            <wadl:doc>
              <![CDATA[The maximum number of activities to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="resultOffset" style="query">
            <wadl:doc>
              <![CDATA[Specified the offset of activities to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="query" style="query">
            <wadl:doc>
              <![CDATA[The query to perform to find activities in the system. By default,
this call returns top level (i.e. root) activities that have currently
started.
<p>
The query specifies the intersection of a list of constraints,
joined together with semicolons (without spaces). For example:
</p>
<dl>
<dt>status==started;parent==</dt>
<dd>looks for running root activities. This is also the
default query.</dd>
<dt>status==failed;finishTime=gt=2012-04-01T20:30:00.000Z</dt>
<dd>looks for failed activities after the given date time.</dd>
<dt>name==Pi Estimator;startTime=gt=2012-04-01T20:30:00.000Z</dt>
<dd>looks for activities started after the given date time,
with the name of "Pi Estimator".</dd>
<dt>startTime=lt=2012-01-02T00:00:00.000Z;finishTime=ge=2012-01-01T00:00:00.000Z</dt>
<dd>looks for activities that are active on 2012 New Year's Day.
Note that they may start before or finish after that day.</dd>
<dt>status==failed;parent==000014-20120425161321-oozie-joe</dt>
<dd>looks for failed child activities of the given parent
activity id.</dd>
<dt>status==started;metrics.cpu_user=gt=10</dt>
<dd>looks for started activities that are using more than 10 cores
per second.</dd>
<dt>type==hive;metrics.user==bc;finishTime=gt=2012-04-01T20:30:00.000Z</dt>
<dd>looks for all hive queries submitted by user bc after the
given date time.</dd>
</dl>

You may query any fields present in the ApiActivity object. You can
also query by activity metric values using the <em>metrics.*</em>
syntax. Values for date time fields should be ISO8601 timestamps.
<p>
The valid comparators are <em>==</em>, <em>!=</em>, <em>=lt=</em>,
<em>=le=</em>, <em>=ge=</em>, and <em>=gt=</em>.
They stand for "==", "!=", "&lt;", "&lt;=",
"&gt;=", "&gt;" respectively.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the activities to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of activities]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/clientConfig">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Download a zip-compressed archive of the client configuration,
of a specific service. This resource does not require any authentication.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The archive data.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/octet-stream"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to which the role belongs.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active service commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active service commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commandsByName">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all the commands that can be executed by name
on the provided service.

<p>
Available since API v6.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[a list of command metadata objects.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/config">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to query.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the configuration of a specific service.
<p>
The "summary" view contains only the configured parameters, and
configuration for role types that contain configured parameters.
<p>
The "full" view contains all available configuration parameters for
the service and its role types.
This mode performs validation on the configuration, which could take
a few seconds on a large cluster (around 500 nodes or more).]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of service and role types configuration parameters.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the service configuration with the given values.
<p>
If a value is set in the given configuration, it will be added
to the service's configuration, replacing any existing entries.
If a value is unset (its value is null), the existing
configuration for the attribute will be erased, if any.
<p>
Attributes that are not listed in the input will maintain their
current values in the configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Configuration changes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new service configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/impalaQueries">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of queries that satisfy the filter
<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="filter" style="query">
            <wadl:doc>
              <![CDATA[A filter to apply to the queries. A basic filter tests the
value of an attribute and looks something like 'rowsFetched = 1' or
'user = root'. Multiple basic filters can be combined into a complex
expression using standard and / or boolean logic and parenthesis.
An example of a complex filter is: 'query_duration > 5s and (user = root or
user = myUserName)'. An example of expected full query string in requested
URL is: '?filter=(query_duration > 5s and (user = root or user = myUserName))'.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query in ISO 8601 format (defaults to 5
minutes before the 'to' time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query in ISO 8601 format (defaults to
current time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="limit" style="query">
            <wadl:doc>
              <![CDATA[The maximum number of queries to return. Queries will be
returned in the following order:
<ul>
<li> All executing queries, ordered from longest to shortest running </li>
<li> All completed queries order by end time descending. </li>
</ul>]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="offset" style="query">
            <wadl:doc>
              <![CDATA[The offset to start returning queries from. This is useful
for paging through lists of queries. Note that this has non-deterministic
behavior if executing queries are included in the response because they
can disappear from the list while paging. To exclude executing queries
from the response and a 'executing = false' clause to your filter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of impala queries and warnings]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/impalaUtilization">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[service name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides the resource utilization of the Impala service as well as the
resource utilization per tenant. Only available with Cloudera Manager Enterprise Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the time range to report utilization in ISO 8601 format.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the the time range to report utilization in ISO 8601 format (defaults to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="tenantType" style="query">
            <wadl:doc>
              <![CDATA[The type of the tenant (POOL or USER).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="daysOfWeek" style="query">
            <wadl:doc>
              <![CDATA[The days of the week for which the user wants to report utilization.
Days is a list of number between 1 to 7, where 1 corresponds to Mon. and 7 corresponds to Sun.
All 7 days are included if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="startHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The start hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 0 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="endHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The end hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 23 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[utilization report of Impala service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/metrics">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch metric readings for a particular service.
<p>
By default, this call will look up all metrics available for the service.
If only specific metrics are desired, use the <i>metrics</i> parameter.
<p>
By default, the returned results correspond to a 5 minute window based on
the provided end time (which defaults to the current server time). The
<i>from</i> and <i>to</i> parameters can be used to control the window
being queried. A maximum window of 3 hours is enforced.
<p>
When requesting a "full" view, aside from the extended properties of the
returned metric data, the collection will also contain information about
all metrics available for the service, even if no readings are available
in the requested window.
<p>
HDFS services that have more than one nameservice will not expose
any metrics. Instead, the nameservices should be queried separately.
<p/>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="metrics" style="query">
            <wadl:doc>
              <![CDATA[Filter for which metrics to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of readings from the monitors.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/nameservices">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List the nameservices of an HDFS service.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of nameservices.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns information for all replication schedules.
<p>
Available since API v11.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="limits" style="query">
            <wadl:doc>
              <![CDATA[Various limits on contents of returned schedules.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of replication schedules.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationScheduleList"/>
          <wadl:representation mediaType="application/xml" element="replicationScheduleList"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates one or more replication schedules.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of the replication schedules to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationScheduleList"/>
          <wadl:representation mediaType="application/xml" element="replicationScheduleList"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of newly added replication schedules.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationScheduleList"/>
          <wadl:representation mediaType="application/xml" element="replicationScheduleList"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns information for all replication schedules.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of replication schedules.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationScheduleList"/>
          <wadl:representation mediaType="application/xml" element="replicationScheduleList"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes all existing replication schedules.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of deleted replication schedules.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationScheduleList"/>
          <wadl:representation mediaType="application/xml" element="replicationScheduleList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleConfigGroups">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates new role config groups.
It is not allowed to create base groups (base must be set to false.)
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The list of groups to be created.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of new role config groups.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the information for all role config groups for
a given cluster and service.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of role config groups for the given service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleTypes">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to modify.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List the supported role types for a service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of role types the service supports.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create new roles in a given service.

<table>
<thead>
<tr>
<th>Service Type</th>
<th>Available Role Types</th>
</tr>
</thead>
<tbody>
<tr>
<td>HDFS (CDH3)</td>
<td>NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, GATEWAY</td>
</tr>
<tr>
<td>HDFS (CDH4)</td>
<td>NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,
FAILOVERCONTROLLER, GATEWAY, JOURNALNODE</td>
</tr>
<tr>
<td>HDFS (CDH5)</td>
<td>NAMENODE, DATANODE, SECONDARYNAMENODE, BALANCER, HTTPFS,
FAILOVERCONTROLLER, GATEWAY, JOURNALNODE, NFSGATEWAY</td>
</tr>
<td>MAPREDUCE</td>
<td>JOBTRACKER, TASKTRACKER, GATEWAY, FAILOVERCONTROLLER,</td>
</tr>
<td>HBASE</td>
<td>MASTER, REGIONSERVER, GATEWAY, HBASETHRIFTSERVER, HBASERESTSERVER</td>
</tr>
<tr>
<td>YARN</td>
<td>RESOURCEMANAGER, NODEMANAGER, JOBHISTORY, GATEWAY</td>
</tr>
<tr>
<td>OOZIE</td>
<td>OOZIE_SERVER</td>
</tr>
<tr>
<td>ZOOKEEPER</td>
<td>SERVER</td>
</tr>
<tr>
<td>HUE (CDH3)</td>
<td>HUE_SERVER, BEESWAX_SERVER, KT_RENEWER, JOBSUBD</td>
</tr>
<tr>
<td>HUE (CDH4)</td>
<td>HUE_SERVER, BEESWAX_SERVER, KT_RENEWER</td>
</tr>
<tr>
<td>HUE (CDH5)</td>
<td>HUE_SERVER, KT_RENEWER</td>
</tr>
<tr>
<td>HUE (CDH5 5.5+)</td>
<td>HUE_SERVER, KT_RENEWER, HUE_LOAD_BALANCER</td>
</tr>
<tr>
<td>FLUME</td>
<td>AGENT</td>
</tr>
<tr>
<td>IMPALA (CDH4)</td>
<td>IMPALAD, STATESTORE, CATALOGSERVER</td>
</tr>
<tr>
<td>IMPALA (CDH5)</td>
<td>IMPALAD, STATESTORE, CATALOGSERVER, LLAMA</td>
</tr>
<tr>
<td>HIVE</td>
<td>HIVESERVER2, HIVEMETASTORE, WEBHCAT, GATEWAY</td>
</tr>
<tr>
<td>SOLR</td>
<td>SOLR_SERVER, GATEWAY</td>
</tr>
<tr>
<td>SQOOP</td>
<td>SQOOP_SERVER</td>
</tr>
<tr>
<td>SQOOP_CLIENT</td>
<td>GATEWAY</td>
</tr>
<tr>
<td>SENTRY</td>
<td>SENTRY_SERVER</td>
</tr>
<tr>
<td>ACCUMULO16</td>
<td>GARBAGE_COLLECTOR, GATEWAY, ACCUMULO16_MASTER, MONITOR,
ACCUMULO16_TSERVER, TRACER</td>
</tr>
<tr>
<td>KMS</td>
<td>KMS</td>
</tr>
<tr>
<td>KS_INDEXER</td>
<td>HBASE_INDEXER</td>
</tr>
<tr>
<td>SPARK_ON_YARN</td>
<td>GATEWAY, SPARK_YARN_HISTORY_SERVER</td>
</tr>
</tbody>

</table>

When specifying roles to be created, the names provided for each role
must not conflict with the names that CM auto-generates for roles.
Specifically, names of the form
"<service name>-<role type>-<arbitrary value>" cannot be used unless the
<arbitrary value> is the same one CM would use. If CM detects such a
conflict, the error message will indicate what <arbitrary value> is safe
to use. Alternately, a differently formatted name should be used.

Since API v6: The role name can be left blank to allow CM to generate the
name.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Roles to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of created roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all roles of a given service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/watcheddir">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Lists all the watched directories.
<p>
Available since API v14. Only available with Cloudera Manager Enterprise
Edition.
<p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of currently watched directories.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Adds a directory to the watching list.
<p>
Available since API v14. Only available with Cloudera Manager Enterprise
Edition.
<p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The directory to be added.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Added directory.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/yarnApplications">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of applications that satisfy the filter
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="filter" style="query">
            <wadl:doc>
              <![CDATA[A filter to apply to the applications. A basic filter tests the
value of an attribute and looks something like 'executing = true' or
'user = root'. Multiple basic filters can be combined into a complex
expression using standard and / or boolean logic and parenthesis.
An example of a complex filter is: 'application_duration > 5s and (user = root or
user = myUserName').]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query in ISO 8601 format (defaults to 5
minutes before the 'to' time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query in ISO 8601 format (defaults to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="limit" style="query">
            <wadl:doc>
              <![CDATA[The maximum number of applications to return. Applications will be
returned in the following order:
<ul>
<li> All executing applications, ordered from longest to shortest running </li>
<li> All completed applications order by end time descending. </li>
</ul>]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="offset" style="query">
            <wadl:doc>
              <![CDATA[The offset to start returning applications from. This is useful
for paging through lists of applications. Note that this has non-deterministic
behavior if executing applications are included in the response because they
can disappear from the list while paging. To exclude executing applications
from the response and a 'executing = false' clause to your filter.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of YARN applications and warnings.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/yarnUtilization">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[service name]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Provides the resource utilization of the yarn service as well as the
resource utilization per tenant. Only available with Cloudera Manager Enterprise Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the time range to report utilization in ISO 8601 format.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the the time range to report utilization in ISO 8601 format (defaults to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="tenantType" style="query">
            <wadl:doc>
              <![CDATA[The type of the tenant (POOL or USER).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="daysOfWeek" style="query">
            <wadl:doc>
              <![CDATA[The days of the week for which the user wants to report utilization.
Days is a list of number between 1 to 7, where 1 corresponds to Mon. and 7 corresponds to Sun.
All 7 days are included if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="startHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The start hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 0 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="endHourOfDay" style="query">
            <wadl:doc>
              <![CDATA[The end hour of a day for which the user wants to report utilization.
The hour is a number between [0-23]. Default value is 23 if this is not specified.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[utilization report of yarn service.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/peers/{peerName}/commands/test">
      <wadl:param name="peerName" style="template">
        <wadl:doc>
          <![CDATA[Name of peer to test.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Test the connectivity of a peer.
<p>
Available since API v11. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="type" style="query">
            <wadl:doc>
              <![CDATA[Type of peer to test. If null, REPLICATION peer type will
be tested.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Test the connectivity of a peer.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleConfigGroups/{roleConfigGroupName}/config">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the role config group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the current revision of the config
for the specified role config group in the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current configuration of the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the config for the given role config group
in the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new config information for the group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated config of the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roleConfigGroups/{roleConfigGroupName}/roles">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the role config group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns all roles in the given role config group
in the Cloudera Management Services.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The roles in the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/commands">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active role commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active role commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/config">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to look up.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve the configuration of a specific Cloudera Management Services role.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List with configured and available configuration options.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Update the configuration of a Cloudera Management Services role.
<p>
If a value is set in the given configuration, it will be added
to the role's configuration, replacing any existing entries.
If a value is unset (its value is null), the existing
configuration for the attribute will be erased, if any.
<p>
Attributes that are not listed in the input will maintain their
current values in the configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Configuration changes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new service configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/externalAccounts/account/{name}/commands/{commandName}">
      <wadl:param name="name" style="template">
        <wadl:doc>
          <![CDATA[The external account name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="commandName" style="template">
        <wadl:doc>
          <![CDATA[The command name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Executes a command on the external account specified
by name.
<p>
Available since API v16.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/hostTemplates/{hostTemplateName}/commands/applyHostTemplate">
      <wadl:param name="hostTemplateName" style="template">
        <wadl:doc>
          <![CDATA[Host template to apply.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Applies a host template to a collection of hosts. This will create a role
for each role config group on each of the hosts.
<p>
The provided hosts must not have any existing roles on them and if the
cluster is not using parcels, the hosts must have a CDH version matching
that of the cluster version.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of hosts to apply the host template to.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="startRoles" style="query">
            <wadl:doc>
              <![CDATA[Whether to start the newly created roles or not.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/activities/{activityId}">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="activityId" style="template">
        <wadl:doc>
          <![CDATA[The id of the activity to retrieve]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a specific activity in the system]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the activity to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The Activity object with the specified id]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/createOozieDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Oozie service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the Oozie Database Schema in the configured database.
This command does not create database. This command creates only tables
required by Oozie. To create database, please refer to oozieCreateEmbeddedDatabase()

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/createSolrHdfsHomeDir">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Solr service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the home directory of a Solr service in HDFS.

<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/createSqoopUserDir">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Sqoop service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the user directory of a Sqoop service in HDFS.

<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/decommission">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HBase service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Decommission roles of a service.
<p>
For HBase services, the list should contain names of RegionServers to
decommission.
<p>
For HDFS services, the list should contain names of DataNodes to
decommission.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of role names to decommision.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/deployClientConfig">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Deploy a service's client configuration.
<p>
The client configuration is deployed to the hosts where the given roles
are running.
<p/>
Added in v3: passing null for the role name list will deploy client configs
to all known service roles.
Added in v6: passing an empty role name list will deploy client configs
to all known service roles.
<p/>
In Cloudera Manager 5.3 and newer, client configurations are fully managed,
meaning that the server maintains state about which client configurations
should exist and be managed by alternatives, and the agents actively
rectify their hosts with this state. Consequently, if this API call is made
with a specific set of roles, Cloudera Manager will deactivate, from
alternatives, any deployed client configs from any non-gateway roles that
are <em>not</em> specified as arguments. Gateway roles are always preserved,
and calling this API with an empty or null argument continues to deploy to
all roles.
<p/>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of role names.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/disableJtHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The MapReduce service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for JobTracker.

As part of disabling HA, any services that depend on the MapReduce service
being modified will be stopped. The command arguments provide options to
specify name of JobTracker that will be preserved. The Command will
redeploy the client configurations for services of the cluster after HA
has been disabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/disableRmHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for ResourceManager.

As part of disabling HA, any services that depend on the YARN service
being modified will be stopped. The command arguments provide options to
specify name of ResourceManager that will be preserved. The command will
redeploy the client configurations for services of the cluster after HA
has been disabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/disableSentryHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[A String representing the Sentry service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for Sentry service.
<p>
This command only applies to CDH 5.13+ Sentry services.
<p>
The command will keep exactly one Sentry server, on the specified host,
and update the ZooKeeper configs needed for Sentry.
<p>
All services that depend on HDFS will be restarted after enabling Sentry HA.
<p>
Note: Sentry doesn't support Rolling Restart.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[An instance of ApiDisableSentryHaArgs
representing the arguments to the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the created command instance]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/enableJtHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The MapReduce service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for a JobTracker.
<p>
This command only applies to CDH4 MapReduce services.
<p>
The command will create a new JobTracker on the specified host and then
create an active/standby pair with the existing JobTracker. Autofailover
will be enabled using ZooKeeper. A ZNode will be created for this purpose.
Command arguments provide option to forcefully create this ZNode if one
already exists. A node may already exists if JobTracker was previously
enabled in HA mode but HA mode was disabled later on. The ZNode is not
deleted when HA is disabled.
<p>
As part of enabling HA, any services that depends on the MapReduce service
being modified will be stopped. Command will redeploy the client
configurations for services of the cluster after HA has been enabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/enableRmHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for a YARN ResourceManager.
<p>
This command only applies to CDH5+ YARN services.
<p>
The command will create a new ResourceManager on the specified host and then
create an active/standby pair with the existing ResourceManager. Autofailover
will be enabled using ZooKeeper.
<p>
As part of enabling HA, any services that depends on the YARN service
being modified will be stopped. Command will redeploy the client
configurations for services of the cluster after HA has been enabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/enableSentryHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[A String representing the Sentry service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for Sentry service.
<p>
This command only applies to CDH 5.13+ Sentry services.
<p>
The command will create a new Sentry server on the specified host
and set the ZooKeeper configs needed for Sentry HA.
<p>
As part of enabling HA, all services that depend on HDFS will be
restarted after enabling Sentry HA.
<p>
Note: Sentry doesn't support Rolling Restart.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[An instance of ApiEnableSentryHaArgs
representing the arguments to the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the created command instance]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/enterMaintenanceMode">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put the service into maintenance mode. This is a synchronous command. The
result is known immediately upon return.

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/exitMaintenanceMode">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take the service out of maintenance mode. This is a synchronous command.
The result is known immediately upon return.

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/firstRun">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Prepare and start a service.

<p>
Perform all the steps needed to prepare the service and start it.
</p>

<p>
Available since API v7.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hbaseCreateRoot">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HBase service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the root directory of an HBase service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hbaseUpgrade">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HBase service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade HBase data in HDFS and ZooKeeper as part of upgrade from CDH4 to CDH5.
<p/>
This is required in order to run HBase after upgrade.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsCreateTmpDir">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the HDFS service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates a tmp directory on the HDFS filesystem.
<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableAutoFailover">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable auto-failover for a highly available HDFS nameservice.
<p>
The command will modify the nameservice's NameNodes configuration to
disable automatic failover, and delete the existing failover controllers.
<p>
The ZooKeeper dependency of the service will not be removed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The nameservice name.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for an HDFS NameNode.
<p>
The NameNode to be kept must be running before HA can be disabled.
<p>
As part of disabling HA, any services that depend on the HDFS service being
modified will be stopped. The command arguments provide options to
re-start these services and to re-deploy the client configurations for
services of the cluster after HA has been disabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsDisableNnHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable High Availability (HA) with Automatic Failover for an HDFS NameNode.
<p>
As part of disabling HA, any services that depend on the HDFS service being
modified will be stopped. The command will delete the Standby NameNode
associated with the specified NameNode. Any FailoverControllers associated
with the NameNode's nameservice are also deleted. A SecondaryNameNode
is created on the host specified by the arugments.
<p>
If no nameservices uses Quorum Journal after HA is disabled for the specified
nameservice, then all JournalNodes are also deleted.
<p>
Then, HDFS service is restarted and all services that were stopped
are started again afterwards.
Finally, client configs for HDFS and its depedents will be re-deployed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableAutoFailover">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable auto-failover for an HDFS nameservice.
<p>
This command requires that the nameservice exists, and HA has been
configured for that nameservice.
<p>
The command will create the needed failover controllers, perform the
needed initialization and configuration, and will start the new roles.
The existing NameNodes which are part of the nameservice will be
re-started in the process.
<p>
This process may require changing the service's configuration, to add a
dependency on the provided ZooKeeper service. This will be done if such a
dependency has not been configured yet, and will cause roles that are
not affected by this command to show an "outdated configuration" status.
<p>
If a ZooKeeper dependency has already been set up by some other means,
it does not need to be provided in the command arguments.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for an HDFS NameNode.
<p>
The command will set up the given "active" and "stand-by" NameNodes as
an HA pair. Both nodes need to already exist.
<p>
If there is a SecondaryNameNode associated with either given NameNode
instance, it will be deleted.
<p>
Note that while the shared edits path may be different for both nodes,
they need to point to the same underlying storage (e.g., an NFS share).
<p>
As part of enabling HA, any services that depend on the HDFS service being
modified will be stopped. The command arguments provide options to
re-start these services and to re-deploy the client configurations for
services of the cluster after HA has been enabled.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsEnableNnHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable High Availability (HA) with Automatic Failover for an HDFS NameNode.
<p>
The command will create a Standby NameNode for the given nameservice
and create FailoverControllers for both Active and Standby NameNodes.
The SecondaryNameNode associated with the Active NameNode will be deleted.
<p>
The command will also create JournalNodes needed for HDFS HA if they
do not already exist.
<p>
As part of enabling HA, any services that depend on the HDFS service being
modified will be stopped. They will be restarted after HA has been enabled.
Finally, client configs for HDFS and its depedents will be re-deployed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsFailover">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initiate a failover in an HDFS HA NameNode pair.
<p>
The arguments should contain the names of the two NameNodes in
the HA pair. The first one should be the currently active NameNode,
the second one the NameNode to be made active.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Names of the NameNodes in the HA pair.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="force" style="query">
            <wadl:doc>
              <![CDATA[Whether to force failover.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsFinalizeRollingUpgrade">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Finalizes the rolling upgrade for HDFS by updating the NameNode
metadata permanently to the next version. Should be done after
doing a rolling upgrade to a CDH version >= 5.2.0.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsRollEdits">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Roll the edits of an HDFS NameNode or Nameservice.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments to the Roll Edits command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hdfsUpgradeMetadata">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade HDFS Metadata as part of a major version upgrade.
<p/>
When doing a major version upgrade for HDFS, it is necessary to start HDFS
in a special mode where it will do any necessary upgrades of stored
metadata. Trying to start HDFS normally will result in an error message and
the NameNode(s) failing to start.
<p/>
The metadata upgrade must eventually be finalized, using the
hdfsFinalizeMetadataUpgrade command on the NameNode.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveUserDir">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Hive service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Hive user directory
<p>
Available since API v4.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateHiveWarehouse">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Hive service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Hive warehouse directory, on Hive services.
<p>
Available since API v3.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Hive service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Hive Metastore Database. Only works with embedded postgresql
database.
<p>
This command is to be run whenever a new user and database needs to be
created in the embedded postgresql database for a Hive service. This
command should usually be followed by a call to
hiveCreateMetastoreDatabaseTables.
<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveCreateMetastoreDatabaseTables">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Hive service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Hive Metastore Database tables.
<p>
This command is to be run whenever a new database has been specified. Will
do nothing if tables already exist. Will not perform an upgrade. Only
Available when all Hive Metastore Servers are stopped.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveUpdateMetastoreNamenodes">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Hive service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Update Hive Metastore to point to a NameNode's Nameservice name instead of
hostname.
<p>
<strong>Back up the Hive Metastore Database before running this command.</strong>
<p>
This command is to be run after enabling HDFS High Availability. Only
available when all Hive Metastore Servers are stopped.
<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveUpgradeMetastore">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Hive service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade Hive Metastore as part of a major version upgrade.
<p/>
When doing a major version upgrade for Hive, it is necessary to upgrade
data in the metastore database.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hiveValidateMetastoreSchema">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Hive service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Validate the Hive Metastore Schema.
<p>
This command checks the Hive metastore schema for any errors and corruptions.
This command is to be run on two instances:
<li>After the Hive Metastore database tables are created.</li>
<li>Both before and after upgrading the Hive metastore database schema./li>
* <p>
Available since API v17.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hueCreateHiveWarehouse">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Hue service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Beeswax role's Hive warehouse directory, on Hue services.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hueDumpDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Runs Hue's dumpdata command.

Available since API v10.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hueLoadDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Runs Hue's loaddata command.

Available since API v10.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/hueSyncDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Runs Hue's syncdb command.

Available since API v10.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Impala service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[<strong>Not needed in CM 5.0.0 Release, since Impala Catalog Database
is not yet available in CDH as of this release.</strong>
Create the Impala Catalog Database. Only works with embedded postgresql
database.
<p>
This command is to be run whenever a new user and database needs to be
created in the embedded postgresql database for the Impala Catalog Server.
This command should usually be followed by a call to
impalaCreateCatalogDatabaseTables.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateCatalogDatabaseTables">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Impala service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[<strong>Not needed in CM 5.0.0 Release, since Impala Catalog Database
is not yet available in CDH as of this release.</strong>
Create the Impala Catalog Database tables.
<p>
This command is to be run whenever a new database has been specified. Will
do nothing if tables already exist. Will not perform an upgrade. Only
available when all Impala Catalog Servers are stopped.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaCreateUserDir">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Impala service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Impala user directory
<p>
Available since API v6.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Impala service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for an Impala Llama ApplicationMaster.
<p>
This command only applies to CDH 5.1+ Impala services.
<p>
The command argument specifies the name of the Llama role to be retained.
The other Llama role in the HA pair will be removed. As part of disabling
HA, any services that depend on the Impala service being modified will be
stopped. The command will redeploy the client configurations for all
services of the cluster after HA has been disabled.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaDisableLlamaRm">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Impala service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable Llama-based resource management for Impala.
<p>
This command only applies to CDH 5.1+ Impala services.
<p>
This command disables resource management for Impala by removing all
Llama roles present in the Impala service. Any services that depend
on the Impala service being modified are restarted by the command,
and client configuration is deployed for all services of the cluster.
<p>
Note that any configuration changes made to YARN and Impala when
enabling resource management are not reverted by this command.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Impala service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for an Impala Llama ApplicationMaster.
<p>
This command only applies to CDH 5.1+ Impala services.
<p>
The command will create a new Llama role on the specified host, and then
create an active/standby pair with the existing Llama role. Autofailover
will be enabled using ZooKeeper.
<p>
If an optional role name is supplied, the new Llama role will be named
accordingly; otherwise, a role name will be automatically generated.
<p>
As part of enabling HA, any services that depend on the Impala service
being modified will be stopped. The command will redeploy the client
configurations for services of the cluster after HA has been enabled.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/impalaEnableLlamaRm">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Impala service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable Llama-based resource management for Impala.
<p>
This command only applies to CDH 5.1+ Impala services.
<p>
This command configures YARN and Impala for Llama resource management,
and then creates one or two Llama roles, as specified by the arguments.
When two Llama roles are created, they are configured as an active/standby
pair. Auto-failover from active to standby Llama will be enabled using
ZooKeeper.
<p>
If an optional role name(s) are supplied, the new Llama role(s) will be
named accordingly; otherwise, role name(s) will be automatically generated.
<p>
By default, YARN, Impala, and any dependent services will be restarted,
and client configuration will be re-deployed across the cluster. These
default actions may be suppressed via setSkipRestart().
<p>
In order to enable Llama resource management, a YARN service must be
present in the cluster, and Cgroup-based resource management must be
enabled for all hosts with NodeManager roles. If these preconditions
are not met, the command will fail.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/importMrConfigsIntoYarn">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Yarn service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Import MapReduce configuration into Yarn, overwriting Yarn configuration.
<p>
You will lose existing Yarn configuration. Read all MapReduce
configuration, role assignments, and role configuration groups and update
Yarn with corresponding values. MR1 configuration will be converted into
the equivalent MR2 configuration.
<p>
Before running this command, Yarn must be stopped and MapReduce must exist
with valid configuration.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/initSolr">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Solr service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initializes the Solr service in Zookeeper.

<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/installOozieShareLib">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Oozie service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates directory for Oozie user in HDFS and installs the ShareLib in it.
<p/>
This command should be re-run after a major version upgrade to refresh the
ShareLib to the latest version.
<p/>
Available since API v3.
<p/>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/offline">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Offline roles of a service.
<p>
Currently the offline operation is only supported by HDFS.
<p>
For HDFS, the offline operation will put DataNodes into <em>HDFS IN MAINTENANCE</em> state which
prevents unnecessary re-replication which could occur if decommissioned.
<p>
The <em>timeout</em> parameter is used to specify a timeout for offline. For HDFS, when the
timeout expires, the DataNode will automatically transition out of <em>HDFS IN MAINTENANCE</em>
state, back to <em>HDFS IN SERVICE</em> state.
<p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of role names to offline.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="timeout" style="query">
            <wadl:doc>
              <![CDATA[Offline timeout in seconds. Offlined roles will automatically transition from offline
state to normal state after timeout.
Specify as null to get the default timeout (4 hours).]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieCreateEmbeddedDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Oozie service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Oozie Server Database. Only works with embedded postgresql
database.
<p>
This command is to be run whenever a new user and database need to be
created in the embedded postgresql database for an Oozie service. This
command should usually be followed by a call to createOozieDb.
<p>
Available since API v10.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieDisableHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Oozie service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Disable high availability (HA) for Oozie.

As part of disabling HA, any services that depend on the Oozie service
being modified will be stopped. The command arguments provide options to
specify name of Oozie Server that will be preserved. After deleting,
other Oozie servers, all the services that were stopped are restarted.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieDumpDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Dump the Oozie Server Database.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieEnableHa">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Oozie service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enable high availability (HA) for Oozie service.
<p>
This command only applies to CDH5+ Oozie services.
<p>
The command will create new Oozie Servers on the specified hosts and
set the ZooKeeper and Load Balancer configs needed for Oozie HA.
<p>
As part of enabling HA, any services that depends on the Oozie service
being modified will be stopped and restarted after enabling Oozie HA.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments for the command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieLoadDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Load the Oozie Server Database from dump.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/oozieUpgradeDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Oozie service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade Oozie Database schema as part of a major version upgrade.
<p/>
When doing a major version upgrade for Oozie, it is necessary to upgrade
the schema of its database before Oozie can run successfully.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/recommission">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Recommission roles of a service.
<p>
The list should contain names of slave roles to recommission.
</p>

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of role names to recommision.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/recommissionWithStart">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start and recommission roles of a service.
<p>
The list should contain names of slave roles to start and recommission.
</p>

<p>
Warning: Evolving. This method may change in the future and does not offer standard compatibility guarantees.
Only support by HDFS.
Do not use without guidance from Cloudera.
</p>

<p>
Available since API v15.
</p>]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of role names to recommision.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/restart">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to start.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart the service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/rollingRestart">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Command to run rolling restart of roles in a service. The sequence is:
<ol>
<li>Restart all the non-slave roles
<li>If slaves are present restart them in batches of size specified in RollingRestartCmdArgs
<li>Perform any post-command needed after rolling restart
</ol>
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabase">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Sentry service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Sentry Server Database. Only works with embedded postgresql
database.
<p>
This command is to be run whenever a new user and database need to be
created in the embedded postgresql database for a Sentry service. This
command should usually be followed by a call to sentryCreateDatabaseTables.
<p>
Available since API v7.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/sentryCreateDatabaseTables">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Sentry service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Sentry Server Database tables.
<p>
This command is to be run whenever a new database has been specified. Will
do nothing if tables already exist. Will not perform an upgrade. Only
Available when Sentry Server is stopped.
<p>
Available since API v7.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/sentryUpgradeDatabaseTables">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Sentry service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade the Sentry Server Database tables.
<p>
This command is to be run whenever Sentry requires an upgrade to its
database tables.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/sqoopCreateDatabaseTables">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Sentry service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Sqoop2 Server Database tables.
<p>
This command is to be run whenever a new database has been specified. Will
do nothing if tables already exist. Will not perform an upgrade. Only
available when Sqoop2 Server is stopped.
<p>
Available since API v10.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/sqoopUpgradeDb">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The Sqoop service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Upgrade Sqoop Database schema as part of a major version upgrade.
<p/>
When doing a major version upgrade for Sqoop, it is necessary to upgrade
the schema of its database before Sqoop can run successfully.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/start">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to start.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start the service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/stop">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to stop.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Stop the service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/switchToMr2">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the Yarn service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Change the cluster to use MR2 instead of MR1. Services will be restarted.
<p>
Will perform the following steps:
<ul>
<li>Update all services that depend on MapReduce to instead depend on Yarn.
</li>
<li>Stop MapReduce</li>
<li>Start Yarn (MR2 Included)</li>
<li>Deploy Yarn (MR2) Client Configuration</li>
</ul>
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/yarnApplicationDiagnosticsCollection">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[Name of the YARN service on which to run the command.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Collect the Diagnostics data for Yarn applications
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Arguments used for collecting diagnostics data for Yarn applications]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/yarnCreateCmContainerUsageInputDirCommand">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates the HDFS directory where YARN container usage metrics are
stored by NodeManagers for CM to read and aggregate into app usage metrics.
<p>
Available since API v13.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/yarnCreateJobHistoryDirCommand">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Yarn job history directory
<p>
Available since API v6.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/yarnFormatStateStore">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Formats the state store in ZooKeeper used for Resource Manager
High Availability. Typically used while moving from non-secure
to secure cluster or vice-versa.
<p>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/yarnNodeManagerRemoteAppLogDirCommand">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The YARN service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create the Yarn NodeManager remote application log directory
<p>
Available since API v6.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/zooKeeperCleanup">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to start.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Clean up all running server instances of a ZooKeeper service.
<p>
This command removes snapshots and transaction log files kept by
ZooKeeper for backup purposes. Refer to the ZooKeeper documentation
for more details.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/zooKeeperInit">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service to start.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initializes all the server instances of a ZooKeeper service.
<p>
ZooKeeper server roles need to be initialized before they
can be used.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/commands/{commandName}">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="commandName" style="template">
        <wadl:doc>
          <![CDATA[The command name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Executes a command on the service specified
by name.
<p>
Available since API v6.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/impalaQueries/attributes">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the list of all attributes that the Service Monitor can associate
with Impala queries.
<p>
Examples of attributes include the user who issued the query and the
number of HDFS bytes read by the query.
<p>
These attributes can be used to search for specific Impala queries through
the getImpalaQueries API. For example the 'user' attribute could be used
in the search 'user = root'. If the attribute is numeric it can also be used
as a metric in a tsquery (ie, 'select hdfs_bytes_read from IMPALA_QUERIES').
<p>
Note that this response is identical for all Impala services.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}">
      <wadl:param name="queryId" style="template">
        <wadl:doc>
          <![CDATA[The queryId to get information about]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns details about the query. Not all queries have details, check
the detailsAvailable field from the getQueries response.
<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="format" style="query">
            <wadl:doc>
              <![CDATA[There are two valid format parameters:
<ul>
<li>
'text': this is a text based, human readable representation of the
Impala runtime profile.
</li>
<li>
'thrift_encoded': this a compact-thrift, base64 encoded representation
of the Impala RuntimeProfile.thrift object. See the Impala documentation
for more details.
</li>
</ul>]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The query details]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}">
      <wadl:param name="nameservice" style="template">
        <wadl:doc>
          <![CDATA[The nameservice to retrieve.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve information about a nameservice.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize. Defaults to 'full'.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details of the nameservice.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieve information about a nameservice.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Details of the nameservice.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/hdfsCopyListing">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the hdfs copy listing command
<p>
The copy listing command will be triggered with the provided arguments
<p>
Available since API v18. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="command"/>
          <wadl:representation mediaType="application/xml" element="command"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/replicationState">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[returns the replication state. for example if incremental export
is enabled, etc]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[view to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[replicate state object.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*"/>
          <wadl:representation mediaType="application/xml"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}">
      <wadl:param name="scheduleId" style="template">
        <wadl:doc>
          <![CDATA[Id of an existing replication schedule.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns information for a specific replication schedule.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Replication schedule.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationSchedule"/>
          <wadl:representation mediaType="application/xml" element="replicationSchedule"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates an existing replication schedule.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:representation mediaType="*/*" element="replicationSchedule"/>
          <wadl:representation mediaType="application/xml" element="replicationSchedule"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The replication schedule after the update.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationSchedule"/>
          <wadl:representation mediaType="application/xml" element="replicationSchedule"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes an existing replication schedule.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The deleted replication schedule.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationSchedule"/>
          <wadl:representation mediaType="application/xml" element="replicationSchedule"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/reports/hdfsUsageReport">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The HDFS service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch the HDFS usage report. For the requested time range, at the
specified aggregation intervals, the report shows HDFS disk usages
per user.
<p>
This call supports returning JSON or CSV, as determined by the
"Accept" header of application/json or text/csv.
<p>
Available since API v4. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="nameservice" style="query">
            <wadl:doc>
              <![CDATA[The (optional) HDFS nameservice. Required for HA setup.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[The (optional) start time of the report in ISO 8601 format (
defaults to 24 hours before "to" time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[The (optional) end time of the report in ISO 8601 format (
defaults to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="aggregation" style="query">
            <wadl:doc>
              <![CDATA[The (optional) aggregation period for the data.
Supports "hourly", "daily" (default) and "weekly".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Report data.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/csv"/>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/reports/mrUsageReport">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The MR service name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch the MR usage report. For the requested time range, at the
specified aggregation intervals, the report shows job CPU usages (and other
metrics) per user.
<p>
This call supports returning JSON or CSV, as determined by the
"Accept" header of application/json or text/csv.
<p>
Available since API v4. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[The (optional) start time of the report in ISO 8601 format
(defaults to 24 hours before "to" time).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[The (optional) end time of the report in ISO 8601 format (defaults
to now).]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="aggregation" style="query">
            <wadl:doc>
              <![CDATA[The (optional) aggregation period for the data.
Supports "hourly", "daily" (default) and "weekly".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Report data.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/csv"/>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsBootstrapStandBy">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Bootstrap HDFS stand-by NameNodes.
<p>
Submit a request to synchronize HDFS NameNodes with their assigned HA
partners. The command requires that the target NameNodes are part of
existing HA pairs, which can be accomplished by setting the nameservice
configuration parameter in the NameNode's configuration.
<p>
The HA partner must already be formatted and running for this command
to run.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the stand-by NameNodes to bootstrap.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsEnterSafemode">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Enter safemode for namenodes
<p/>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[NameNodes for which to enter safemode.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFinalizeMetadataUpgrade">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Finalize HDFS NameNode metadata upgrade.
<p/>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[NameNodes for which to finalize the upgrade.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsFormat">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Format HDFS NameNodes.
<p>
Submit a format request to a list of NameNodes on a service. Note that
trying to format a previously formatted NameNode will fail.
<p>
Note about high availability: when two NameNodes are working in an HA
pair, only one of them should be formatted.
<p>
Bulk command operations are not atomic, and may contain partial failures.
The returned list will contain references to all successful commands, and
a list of error messages identifying the roles on which the command
failed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the NameNodes to format.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeAutoFailover">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initialize HDFS HA failover controller metadata.
<p>
The controllers being initialized must already exist and be properly
configured. The command will make sure the needed data is initialized
for the controller to work.
<p>
Only one controller per nameservice needs to be initialized.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the controllers to initialize.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsInitializeSharedDir">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initialize HDFS NameNodes' shared edit directory.
<p>
Shared edit directories are used when two HDFS NameNodes are operating as
a high-availability pair. This command initializes the shared directory to
include the necessary metadata.
<p>
The provided role names should reflect one of the NameNodes in the
respective HA pair; the role must be stopped and its data directory must
already have been formatted. The shared edits directory must be empty for
this command to succeed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the NameNodes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsLeaveSafemode">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Leave safemode for namenodes
<p/>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[NameNodes for which to leave safemode.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hdfsSaveNamespace">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Save namespace for namenodes
<p/>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[NameNodes for which to save namespace.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/hueSyncDb">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Create / update the Hue database schema.
<p>
This command is to be run whenever a new database has been specified or,
as necessary, after an upgrade.
<p>
This request should be sent to Hue servers only.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the Hue server roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/jmapDump">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jmapDump diagnostic command. The command runs the jmap utility to
capture a dump of the role's java heap.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jmap.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/jmapHisto">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jmapHisto diagnostic command. The command runs the jmap utility to
capture a histogram of the objects on the role's java heap.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jmap.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/jstack">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the jstack diagnostic command. The command runs the jstack utility to
capture a role's java thread stacks.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to jstack.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/lsof">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the lsof diagnostic command. This command runs the lsof utility to
list a role's open files.
<p/>
Available since API v8.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the names of the roles to lsof.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/refresh">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Refresh a role's data.
<p>
For MapReduce services, this command should be executed on JobTracker
roles. It refreshes the role's queue and node information.
<p>
For HDFS services, this command should be executed on NameNode or
DataNode roles. For NameNodes, it refreshes the role's node list.
For DataNodes, it refreshes the role's data directory list and other
configuration.
<p>
For YARN services, this command should be executed on ResourceManager
roles. It refreshes the role's queue and node information.
<p>
Available since API v1. DataNode data directories refresh available
since API v10.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/restart">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Restart a set of role instances
<p>
Bulk command operations are not atomic, and may contain partial failures.
The returned list will contain references to all successful commands, and
a list of error messages identifying the roles on which the command
failed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The name of the roles to restart.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/start">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Start a set of role instances.
<p>
Bulk command operations are not atomic, and may contain partial failures.
The returned list will contain references to all successful commands, and
a list of error messages identifying the roles on which the command
failed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles to start.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/stop">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Stop a set of role instances.
<p>
Bulk command operations are not atomic, and may contain partial failures.
The returned list will contain references to all successful commands, and
a list of error messages identifying the roles on which the command
failed.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The role type.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A reference to the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperCleanup">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Cleanup a list of ZooKeeper server roles.
<p>
This command removes snapshots and transaction log files kept by
ZooKeeper for backup purposes. Refer to the ZooKeeper documentation
for more details.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/zooKeeperInit">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Initialize a list of ZooKeeper server roles.
<p>
This applies to ZooKeeper services from CDH4. Before ZooKeeper server
roles can be used, they need to be initialized.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleCommands/{commandName}">
      <wadl:param name="commandName" style="template">
        <wadl:doc>
          <![CDATA[the name of command to execute.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Execute a role command by name.
<p/>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[the roles to run this command on.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of submitted commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/roles">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Moves roles to the base role config group.

The roles can be moved from any role config group belonging to the same
service. The role type of the roles may vary. Each role will be moved to
its corresponding base group depending on its role type.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles to move.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The roles which have been moved successfully.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the requested group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the information for a role config group.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The requested role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates an existing role config group
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The updated role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[The optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Role updated role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a role config group.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The deleted role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes a role from a given service.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the deleted role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves detailed information about a role.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The details of the role.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/snapshots/policies">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Creates one or more snapshot policies.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[List of the snapshot policies to create.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of newly added policies.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns information for all snapshot policies.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of snapshot policies.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/watcheddir/{directoryPath}">
      <wadl:param name="directoryPath" style="template">
        <wadl:doc>
          <![CDATA[The directory path to be removed.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Removes a directory from the watching list.
<p>
Available since API v14. Only available with Cloudera Manager Enterprise
Edition.
<p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Removed directory.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/yarnApplications/attributes">
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the list of all attributes that the Service Monitor can associate
with YARN applications.
<p>
Examples of attributes include the user who ran the application and the
number of maps completed by the application.
<p>
These attributes can be used to search for specific YARN applications through
the getYarnApplications API. For example the 'user' attribute could be used
in the search 'user = root'. If the attribute is numeric it can also be used
as a metric in a tsquery (ie, 'select maps_completed from YARN_APPLICATIONS').
<p>
Note that this response is identical for all YARN services.
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/commands/enterMaintenanceMode">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put the Cloudera Management Service role into maintenance mode.This is a
synchronous command. The result is known immediately upon return.

<p>
Available since API v18.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/commands/exitMaintenanceMode">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take the Cloudera Management Service role out of maintenance mode. This is
a synchronous command. The result is known immediately upon return.

<p>
Available since API v18.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/logs/full">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch logs from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the log file for the role's main process.
<p>
If the role is not started, this will be the log file associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's log file.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/logs/stacks">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch stacks logs from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the stacks log file, if any, for the role's main process. Note
that not all roles support periodic stacks collection.

The log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's log file.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/logs/stacksBundle">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch the stacks logs bundle from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Download a zip-compressed archive of role stacks logs. Note that not all
roles support periodic stacks collection.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The archive data.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/octet-stream"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/logs/stderr">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch stderr from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the role's standard error output.
<p>
If the role is not started, this will be the output associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's standard error output.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/cm/service/roles/{roleName}/logs/stdout">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch stdout from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the role's standard output.
<p>
If the role is not started, this will be the output associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's standard output.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves detailed information about a parcel.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[the parcel]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/children">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="activityId" style="template">
        <wadl:doc>
          <![CDATA[The id of the activity]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the child activities]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="maxResults" style="query">
            <wadl:doc>
              <![CDATA[The maximum number of activities to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="resultOffset" style="query">
            <wadl:doc>
              <![CDATA[Specified the offset of activities to return.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the children to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of child activities for the specified activity]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/metrics">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="activityId" style="template">
        <wadl:doc>
          <![CDATA[The name of the activity.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch metric readings for a particular activity.
<p>
By default, this call will look up all metrics available for the activity. If
only specific metrics are desired, use the <i>metrics</i> parameter.
<p>
By default, the returned results correspond to a 5 minute window based on
the provided end time (which defaults to the current server time). The
<i>from</i> and <i>to</i> parameters can be used to control the window
being queried. A maximum window of 3 hours is enforced.
<p>
When requesting a "full" view, aside from the extended properties of the
returned metric data, the collection will also contain information about
all metrics available for the activity, even if no readings are available
in the requested window.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="metrics" style="query">
            <wadl:doc>
              <![CDATA[Filter for which metrics to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of readings from the monitors.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/activities/{activityId}/similar">
      <wadl:param name="clusterName" style="template">
        <wadl:doc>
          <![CDATA[The name of the cluster]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="activityId" style="template">
        <wadl:doc>
          <![CDATA[The id of the activity]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of similar activities]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the activities to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The list of similar activities to the specified activity]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}/cancel">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="queryId" style="template">
        <wadl:doc>
          <![CDATA[The queryId to cancel]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Cancels an Impala Query.
<p>
Available since API v4.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A warning if there was one. Otherwise null.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/nameservices/{nameservice}/metrics">
      <wadl:param name="nameservice" style="template">
        <wadl:doc>
          <![CDATA[The nameservice.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch metric readings for a particular nameservice.
<p>
By default, this call will look up all metrics available. If only specific
metrics are desired, use the <i>metrics</i> parameter.
<p>
By default, the returned results correspond to a 5 minute window based on
the provided end time (which defaults to the current server time). The
<i>from</i> and <i>to</i> parameters can be used to control the window
being queried. A maximum window of 3 hours is enforced.
<p>
When requesting a "full" view, aside from the extended properties of the
returned metric data, the collection will also contain information about
all metrics available, even if no readings are available in the requested
window.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="metrics" style="query">
            <wadl:doc>
              <![CDATA[Filter for which metrics to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of readings from the monitors.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/collectDiagnosticData">
      <wadl:param name="scheduleId" style="template">
        <wadl:doc>
          <![CDATA[Schedule ID]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Collect diagnostic data for a schedule, optionally for a subset of commands
on that schedule, matched by schedule ID.

The returned command's resultDataUrl property, upon the commands completion,
will refer to the generated diagnostic data.
Available since API v11.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Replication collection arguments]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationDiagnosticsCollectionArgs"/>
          <wadl:representation mediaType="application/xml" element="replicationDiagnosticsCollectionArgs"/>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[view to materialize]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Command generated to collect the diagnostics data.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="command"/>
          <wadl:representation mediaType="application/xml" element="command"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/history">
      <wadl:param name="scheduleId" style="template">
        <wadl:doc>
          <![CDATA[Id of an existing replication schedule.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of commands triggered by a schedule.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="limit" style="query">
            <wadl:doc>
              <![CDATA[Maximum number of commands to retrieve.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="offset" style="query">
            <wadl:doc>
              <![CDATA[Index of first command to retrieve.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of commands for the schedule.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="replicationCommandList"/>
          <wadl:representation mediaType="application/xml" element="replicationCommandList"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/replications/{scheduleId}/run">
      <wadl:param name="scheduleId" style="template">
        <wadl:doc>
          <![CDATA[Id of an existing replication schedule.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Run the schedule immediately.
<p>
The replication command will be triggered with the configured arguments,
and will be recorded in the schedule's history.
<p>
Available since API v3. Only available with Cloudera Manager Enterprise
Edition.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="dryRun" style="query">
            <wadl:doc>
              <![CDATA[Whether to execute a dry run.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Information about the submitted command.]]>
          </wadl:doc>
          <wadl:representation mediaType="*/*" element="command"/>
          <wadl:representation mediaType="application/xml" element="command"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/config">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the role config group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the current revision of the config
for the specified role config group.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The current configuration of the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the config for the given role config group.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The new config information for the group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The updated config of the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roleConfigGroups/{roleConfigGroupName}/roles">
      <wadl:param name="roleConfigGroupName" style="template">
        <wadl:doc>
          <![CDATA[The name of the role config group.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns all roles in the given role config group.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The roles in the role config group.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Moves roles to the specified role config group.

The roles can be moved from any role config group belonging
to the same service. The role type of the destination group
must match the role type of the roles.
<p>
Available since API v3.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[The names of the roles to move.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The roles which have been moved successfully.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to start.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[List active role commands.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A list of active role commands.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/config">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to look up.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the configuration of a specific role. Note that the "full" view
performs validation on the configuration, which could take a few seconds
on a large cluster (around 500 nodes or more).]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of role configuration parameters.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates the role configuration with the given values.
<p>
If a value is set in the given configuration, it will be added
to the role's configuration, replacing any existing entries.
If a value is unset (its value is null), the existing
configuration for the attribute will be erased, if any.
<p>
Attributes that are not listed in the input will maintain their
current values in the configuration.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Configuration changes.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
          <wadl:param name="message" style="query">
            <wadl:doc>
              <![CDATA[Optional message describing the changes.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The new service configuration.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/metrics">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The name of the role.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Fetch metric readings for a particular role.
<p>
By default, this call will look up all metrics available for the role. If
only specific metrics are desired, use the <i>metrics</i> parameter.
<p>
By default, the returned results correspond to a 5 minute window based on
the provided end time (which defaults to the current server time). The
<i>from</i> and <i>to</i> parameters can be used to control the window
being queried. A maximum window of 3 hours is enforced.
<p>
When requesting a "full" view, aside from the extended properties of the
returned metric data, the collection will also contain information about
all metrics available for the role, even if no readings are available
in the requested window.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="from" style="query">
            <wadl:doc>
              <![CDATA[Start of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="to" style="query">
            <wadl:doc>
              <![CDATA[End of the period to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="metrics" style="query">
            <wadl:doc>
              <![CDATA[Filter for which metrics to query.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view of the data to materialize,
either "summary" or "full".]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of readings from the monitors.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process">
      <wadl:param name="roleName" style="template"/>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The process associated with this resource.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}">
      <wadl:param name="policyName" style="template">
        <wadl:doc>
          <![CDATA[Name of an existing snapshot policy.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns information for a specific snapshot policy.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Snapshot policy.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="PUT">
        <wadl:doc>
          <![CDATA[Updates an existing snapshot policy.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:doc>
            <![CDATA[Modified policy.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The snapshot policy after the update.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
      <wadl:method name="DELETE">
        <wadl:doc>
          <![CDATA[Deletes an existing snapshot policy.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[The deleted snapshot policy.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/yarnApplications/{applicationId}/kill">
      <wadl:param name="serviceName" style="template">
        <wadl:doc>
          <![CDATA[The name of the service]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="applicationId" style="template">
        <wadl:doc>
          <![CDATA[The applicationId to kill]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Kills an YARN Application
<p>
Available since API v6.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[A warning if there was one. Otherwise null.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/enterMaintenanceMode">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Put the role into maintenance mode. This is a synchronous command. The
result is known immediately upon return.

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/commands/exitMaintenanceMode">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role name.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[Take the role out of maintenance mode. This is a synchronous command. The
result is known immediately upon return.

<p>
Available since API v2.
</p>]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Synchronous command result.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/full">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch logs from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the log file for the role's main process.
<p>
If the role is not started, this will be the log file associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's log file.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stderr">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch stderr from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the role's standard error output.
<p>
If the role is not started, this will be the output associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's standard error output.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/logs/stdout">
      <wadl:param name="roleName" style="template">
        <wadl:doc>
          <![CDATA[The role to fetch stdout from.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Retrieves the role's standard output.
<p>
If the role is not started, this will be the output associated with
the last time the role was run.
<p>
Log files are returned as plain text (type "text/plain").]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the role's standard output.]]>
          </wadl:doc>
          <wadl:representation mediaType="text/plain"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/snapshots/policies/{policyName}/history">
      <wadl:param name="policyName" style="template">
        <wadl:doc>
          <![CDATA[Name of an existing snapshot policy.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns a list of commands triggered by a snapshot policy.]]>
        </wadl:doc>
        <wadl:request>
          <wadl:param name="limit" style="query">
            <wadl:doc>
              <![CDATA[Maximum number of commands to retrieve.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="offset" style="query">
            <wadl:doc>
              <![CDATA[Index of first command to retrieve.]]>
            </wadl:doc>
          </wadl:param>
          <wadl:param name="view" style="query">
            <wadl:doc>
              <![CDATA[The view to materialize.]]>
            </wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc>
            <![CDATA[List of commands for the policy.]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/activate">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that activates the parcel on the cluster.
<p>
Since it is synchronous, the result is known immediately upon return.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDistribution">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that cancels the parcel distribution.
<p>
Since it is synchronous, the result is known immediately upon return.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/cancelDownload">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that cancels the parcel download.
<p>
Since it is synchronous, the result is known immediately upon return.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/deactivate">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that deactivates the parcel on the cluster.
<p>
Since it is synchronous, the result is known immediately upon return.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/removeDownload">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that removes the downloaded parcel.
<p>
Since it is synchronous, the result is known immediately upon return.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDistribution">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that starts the distribution of the parcel
to the cluster.
<p>
Since it is synchronous, the result is known immediately upon return.
In order to see the progress of the distribution, a call
to ParcelResource#readParcel() needs to be made.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startDownload">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that starts the parcel download.
<p>
Since it is synchronous, the result is known immediately upon return.
In order to see the progress of the download, a call
to ParcelResource#readParcel() needs to be made.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/parcels/products/{product}/versions/{version}/commands/startRemovalOfDistribution">
      <wadl:param name="product" style="template"/>
      <wadl:param name="version" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="POST">
        <wadl:doc>
          <![CDATA[A synchronous command that removes the distribution from the hosts in
the cluster.
<p>
Since it is synchronous, the result is known immediately upon return.
In order to see the progress of the removal, a call
to ParcelResource#readParcel() needs to be made.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[synchronous command result]]>
          </wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
    <wadl:resource path="/api/v19/clusters/{clusterName}/services/{serviceName}/roles/{roleName}/process/configFiles/{configFileName }">
      <wadl:param name="configFileName" style="template">
        <wadl:doc>
          <![CDATA[Name of the config file to get.]]>
        </wadl:doc>
      </wadl:param>
      <wadl:param name="roleName" style="template"/>
      <wadl:param name="serviceName" style="template"/>
      <wadl:param name="clusterName" style="template"/>
      <wadl:method name="GET">
        <wadl:doc>
          <![CDATA[Returns the contents of the specified config file.
A multi-level file name (e.g. hadoop-conf/hdfs-site.xml) is
acceptable here.]]>
        </wadl:doc>
        <wadl:request/>
        <wadl:response>
          <wadl:doc>
            <![CDATA[Contents of the specified config file]]>
          </wadl:doc>
          <wadl:representation mediaType="application/octet-stream"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
  </wadl:resources>
</wadl:application>
